What happens when you initialize a repository? Why do you need to do it?

	It creates a .git folder which will be used to keep track of any 
	commits. It also keeps track of the branch and which file is HEAD. 
	
How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area is a temporary area to store files that you want to 
	commit. The value is that you can still add or remove files before
	you actually do the commit. It also allows you to pick only the 
	files from your working directory that you want to commit as a 
	single logical commit. It also allows you to see what the difference
	is between the files in the working directory and the staging area,
	as well as the differences between the files in the staging area and
	the repository.

How can you use the staging area to make sure you have one commit per logical
change?

		When you do a git diff command you will see all the changes you have
		made to your working directory. This allows you to only do the git
		add command, which adds the files to the staging area, to the files
		that are logically similar or for one particular feature or fix 
		without having to move them all. When you run the git diff --staged
		command allows you to check that you are going to commit the correct
		files.		

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches are helpful when you may be working on more than one fix or 
	feature at a time. Or you may be wanting to simply try something out
	before you decide whether or not you actually want to commit that change
	without it affecting what you are doing on the master branch.

How do the diagrams help you visualize the branch structure?

	It makes it very clear which changes from an earlier checked out change 
	can be reached by other branches and which ones cannot. It enforces the
	idea that if you want to save a change that you make to an earlier
	checked out version, you will need to create a new branch for that change
	and then commit the change to that new branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	The result of merging two branches together is that now the one branch, 
	usually the master, will contain all the commits from both branches in
	timestamp order. The reason we represent it the way we do on the diagram
	is because we are in effect changing the tip of the master so that all 
	the commits are reachable in this one branch.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?